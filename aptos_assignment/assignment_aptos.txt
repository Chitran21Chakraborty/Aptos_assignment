module 0xYourModuleAddress::Vault {
    use std::assert;
    use std::signer;
    use aptos_framework::coin;
    use aptos_framework::event;
    use aptos_framework::aptos_coin::AptosCoin;

    const E_NOT_ADMIN: u64 = 1001;
    const E_INSUFFICIENT_BALANCE: u64 = 1002;

    struct Vault has key {
        admin: address,
        vault_address: address,
        total_balance: u64,
        allocations: vector<(address, u64)>,
        tokens_deposited_events: event::EventHandle<TokensDepositedEvent>,
        tokens_allocated_events: event::EventHandle<TokensAllocatedEvent>,
    }

    struct TokensDepositedEvent has drop, store {
        amount: u64,
    }

    struct TokensAllocatedEvent has drop, store {
        recipient: address,
        amount: u64,
    }

    public entry fun init_module(admin: &signer, vault_address: address) acquires Vault {
        move_to(admin, Vault {
            admin: signer::address_of(admin),
            vault_address,
            total_balance: 0,
            allocations: vector::empty(),
            tokens_deposited_events: event::new_event_handle<TokensDepositedEvent>(admin),
            tokens_allocated_events: event::new_event_handle<TokensAllocatedEvent>(admin),
        });
    }

    public entry fun deposit_tokens(admin: &signer, vault_address: address, amount: u64) acquires Vault {
        let vault = borrow_global_mut<Vault>(vault_address);

        assert!(vault.admin == signer::address_of(admin), E_NOT_ADMIN);

        coin::transfer<AptosCoin>(admin, vault.vault_address, amount);

        vault.total_balance = vault.total_balance + amount;

        event::emit_event(&mut vault.tokens_deposited_events, TokensDepositedEvent { amount });
    }

    public entry fun allocate_tokens(admin: &signer, vault_address: address, recipient: address, amount: u64) acquires Vault {
        let vault = borrow_global_mut<Vault>(vault_address);

        assert!(vault.admin == signer::address_of(admin), E_NOT_ADMIN);
        assert!(vault.total_balance >= amount, E_INSUFFICIENT_BALANCE);

        vault.allocations.push((recipient, amount));
        vault.total_balance = vault.total_balance - amount;

        event::emit_event(&mut vault.tokens_allocated_events, TokensAllocatedEvent { recipient, amount });
    }

    public entry fun claim_tokens(claimer: &signer, vault_address: address) acquires Vault {
        let vault = borrow_global_mut<Vault>(vault_address);
        let claimer_address = signer::address_of(claimer);

        let mut claimed_amount = 0u64;

        let mut i = 0;
        while (i < vector::length(&vault.allocations)) {
            let (recipient, amount) = vector::borrow_mut(&mut vault.allocations, i);
            if (*recipient == claimer_address) {
                claimed_amount = *amount;
                *amount = 0;
                break;
            }
            i = i + 1;
        }

        assert!(claimed_amount > 0, E_INSUFFICIENT_BALANCE);

        coin::transfer<AptosCoin>(vault.vault_address, claimer_address, claimed_amount);
    }

    public entry fun withdraw_tokens(admin: &signer, vault_address: address, amount: u64) acquires Vault {
        let vault = borrow_global_mut<Vault>(vault_address);

        assert!(vault.admin == signer::address_of(admin), E_NOT_ADMIN);
        assert!(vault.total_balance >= amount, E_INSUFFICIENT_BALANCE);

        vault.total_balance = vault.total_balance - amount;

        coin::transfer<AptosCoin>(vault.vault_address, signer::address_of(admin), amount);
    }

    public fun get_vault_balance(vault_address: address): u64 acquires Vault {
        let vault = borrow_global<Vault>(vault_address);
        vault.total_balance
    }
}
